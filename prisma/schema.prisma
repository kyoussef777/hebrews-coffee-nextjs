// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  /// Role determines what actions the user can perform.  STAFF users can create and manage orders,
  /// while ADMIN users can access analytics, inventory and perform destructive operations like database resets.
  role      Role     @default(STAFF)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Order {
  id           String   @id @default(cuid())
  orderNumber  Int      @unique @default(autoincrement()) @map("order_number") 
  customerName String   @map("customer_name")
  drink        String
  milk         String
  syrups       Json?    @default("[]") // Array of {syrupName: string, pumps: number}
  foam         String?
  temperature  String
  extraShots   Int      @default(0) @map("extra_shots")
  notes        String?
  status       OrderStatus @default(PENDING)
  price        Float    @default(0.0)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

model MenuConfig {
  id        String   @id @default(cuid())
  itemType  MenuItemType @map("item_type")
  itemName  String   @map("item_name")
  price     Float?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("menu_config")
}

model Settings {
  id           String   @id @default(cuid())
  settingKey   String   @unique @map("setting_key")
  settingValue String   @map("setting_value")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

model InventoryCost {
  id        String   @id @default(cuid())
  itemName  String   @map("item_name")
  category  InventoryCategory
  unitCost  Float    @map("unit_cost")  // Cost per unit (e.g., per shot, per ml, etc.)
  unit      String   // Unit of measurement (shots, ml, oz, etc.)
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relation to inventory items
  inventoryItems InventoryItem[]

  @@map("inventory_costs")
}

model InventoryItem {
  id                String   @id @default(cuid())
  costItemId        String   @map("cost_item_id")
  initialQuantity   Float    @default(0) @map("initial_quantity")    // Quantity purchased (for cost calculation)
  currentStock      Float    @default(0) @map("current_stock")  // Current inventory quantity
  reorderLevel      Float?   @map("reorder_level")       // When to reorder
  lastRestocked     DateTime? @map("last_restocked")
  totalCost         Float?   @map("total_cost")          // Calculated: unitCost * initialQuantity
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  costItem          InventoryCost @relation(fields: [costItemId], references: [id], onDelete: Cascade)
  usageEntries      InventoryUsageEntry[]

  @@unique([costItemId])
  @@map("inventory_items")
}

model InventoryUsageSession {
  id           String   @id @default(cuid())
  date         DateTime @default(now()) @db.Date
  isActive     Boolean  @default(true) @map("is_active")  // false when day is closed
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  usageEntries InventoryUsageEntry[]

  @@unique([date])
  @@map("inventory_usage_sessions")
}

model InventoryUsageEntry {
  id                String   @id @default(cuid())
  sessionId         String   @map("session_id")
  inventoryItemId   String   @map("inventory_item_id")
  startingQuantity  Float    @map("starting_quantity")
  endingQuantity    Float?   @map("ending_quantity")  // null until end of day
  usedQuantity      Float?   @map("used_quantity")    // calculated field
  notes             String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  session       InventoryUsageSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)

  @@unique([sessionId, inventoryItemId])
  @@map("inventory_usage_entries")
}

model LabelSettings {
  id        String   @id @default(cuid())
  name      String
  width     Float
  height    Float
  elements  Json     // Store label elements as JSON
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("label_settings")
}

enum OrderStatus {
  PENDING     @map("pending")
  IN_PROGRESS @map("in_progress")
  COMPLETED   @map("completed")
}

enum MenuItemType {
  DRINK       @map("drink")
  MILK        @map("milk")
  SYRUP       @map("syrup")
  FOAM        @map("foam")
  TEMPERATURE @map("temperature")
}

enum InventoryCategory {
  COFFEE_BEANS  @map("coffee_beans")
  MILK          @map("milk")
  SYRUP         @map("syrup")
  EQUIPMENT     @map("equipment")
  SUPPLIES      @map("supplies")
  LABOR         @map("labor")
  OTHER         @map("other")
}

/// Giveaway participants track customers who have entered the t-shirt giveaway.
/// Entries are based on the number of orders placed - more orders = more chances to win.
model RaffleParticipant {
  id          String   @id @default(cuid())
  customerName String  @map("customer_name")
  phoneNumber  String  @map("phone_number")
  entries     Int      @default(1) // Number of entries based on orders
  hasWon      Boolean  @default(false) @map("has_won")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([customerName, phoneNumber])
  @@map("raffle_participants")
}

enum Role {
  ADMIN
  STAFF
}

/// Simple inventory tracking focused on quantities only
model SimpleInventory {
  id              String   @id @default(cuid())
  itemName        String   @map("item_name")
  category        InventoryCategory
  initialQuantity Float    @default(0) @map("initial_quantity")
  currentStock    Float    @default(0) @map("current_stock")
  unit            String
  reorderLevel    Float?   @map("reorder_level")
  notes           String?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations for quantity tracking over time
  quantityLogs    QuantityLog[]

  @@map("simple_inventory")
}

/// Track quantity changes over time
model QuantityLog {
  id                String   @id @default(cuid())
  simpleInventoryId String   @map("simple_inventory_id")
  previousQuantity  Float    @map("previous_quantity")
  newQuantity       Float    @map("new_quantity")
  changeAmount      Float    @map("change_amount")  // newQuantity - previousQuantity
  changeReason      String?  @map("change_reason")  // "initial_stock", "usage", "restock", "adjustment"
  notes             String?
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  simpleInventory   SimpleInventory @relation(fields: [simpleInventoryId], references: [id], onDelete: Cascade)

  @@map("quantity_logs")
}