name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint with annotations
      run: |
        npx eslint . --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif
      continue-on-error: true

    - name: Upload ESLint results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: eslint-results.sarif
        wait-for-processing: true

    - name: TypeScript strict check
      run: npx tsc --noEmit --strict

    - name: Check code formatting with Prettier
      run: |
        npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,md}"
      continue-on-error: true

    - name: Bundle analyzer
      run: |
        npm run build
        npx @next/bundle-analyzer
      env:
        ANALYZE: true
        DATABASE_URL: sqlite:./dev.db
        NEXTAUTH_SECRET: test-secret
        NEXTAUTH_URL: http://localhost:3000

  performance-audit:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        DATABASE_URL: sqlite:./dev.db
        NEXTAUTH_SECRET: test-secret
        NEXTAUTH_URL: http://localhost:3000

    - name: Start application
      run: npm start &
      env:
        DATABASE_URL: sqlite:./dev.db
        NEXTAUTH_SECRET: test-secret
        NEXTAUTH_URL: http://localhost:3000

    - name: Wait for application to start
      run: npx wait-on http://localhost:3000

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v12
      with:
        configPath: './lighthouse.config.js'
        uploadArtifacts: true
        temporaryPublicStorage: true

  test-coverage:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Jest and testing dependencies
      run: |
        npm install --save-dev jest @testing-library/react @testing-library/jest-dom jest-environment-jsdom
        npm install --save-dev @types/jest

    - name: Create Jest config
      run: |
        cat > jest.config.js << 'EOF'
        const nextJest = require('next/jest')
        
        const createJestConfig = nextJest({
          dir: './',
        })
        
        const config = {
          coverageProvider: 'v8',
          testEnvironment: 'jsdom',
          setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
          collectCoverageFrom: [
            'src/**/*.{js,jsx,ts,tsx}',
            '!src/**/*.d.ts',
          ],
        }
        
        module.exports = createJestConfig(config)
        EOF

    - name: Create Jest setup
      run: |
        cat > jest.setup.js << 'EOF'
        import '@testing-library/jest-dom'
        EOF

    - name: Create sample test
      run: |
        mkdir -p src/__tests__
        cat > src/__tests__/sample.test.ts << 'EOF'
        describe('Sample Test', () => {
          it('should pass', () => {
            expect(true).toBe(true)
          })
        })
        EOF

    - name: Run tests with coverage
      run: npm test -- --coverage --watchAll=false
      continue-on-error: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella